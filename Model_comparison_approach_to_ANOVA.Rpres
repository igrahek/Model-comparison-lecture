Model comparison approach to ANOVA
========================================================
author: Ivan Grahek
date: Ghent University (Belgium)
autosize: true
transition: none
width: 1600
height: 1000
css: css-file.css

Models are full of lines
========================================================
incremental: true
type: lineheight

- Bullet 1
- Bullet 2
- Bullet 3

Simple regression
========================================================
incremental: true
type: lineheight

$$\large y = \beta_0 + \beta_1 * x$$



Let's get some data
========================================================
incremental: true
type: lineheight

Here is some fascinating data on properties of cars

```{r, message = FALSE} 
attach(mtcars)
d = mtcars
head (d)
```

Let's plot the data
========================================================
incremental: true
type: lineheight

A simple scatterplot

```{r, message = FALSE, fig.width = 16, fig.heigth = 8, fig.align = "center"}  
plot(wt, mpg, main="Fascinating data", xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
```

Fitting the simplest line
========================================================
incremental: true
type: lineheight

Fitting a straight line through data

```{r, message = FALSE, fig.width = 16, fig.heigth = 8, fig.align = "center"} 
model = lm(mpg ~ 1, data = mtcars)
  
plot(wt, mpg, main="Fascinating data",xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)

abline(model, col="red") # plot the mean
```

How many lies around the line?
========================================================
incremental: true
type: lineheight

Residuals

```{r, message = FALSE, fig.width = 16, fig.heigth = 8, fig.align = "center"} 
model = lm(mpg ~ 1, data = mtcars)
  
plot(wt, mpg, main="Fascinating data",xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
abline(model, col="red") # plot the mean

# calculate residuals and predicted values
res = signif(residuals(model), 5)
pre = predict(model) # plot distances between points and the regression line
segments(wt, mpg, wt, pre, col="red")

```

Fitting the second simplest line
========================================================
incremental: true
type: lineheight

Fitting a straight line through data

```{r, message = FALSE, fig.width = 16, fig.heigth = 8, fig.align = "center"} 
model = lm(mpg ~ 1 + wt, data = mtcars)
  
plot(wt, mpg, main="Fascinating data",xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
abline(model, col="red") # plot the mean

```

How many lies around the line?
========================================================
incremental: true
type: lineheight

Residuals

```{r, message = FALSE, fig.width = 16, fig.heigth = 8, fig.align = "center"} 
model = lm(mpg ~ 1 + wt, data = mtcars)
  
plot(wt, mpg, main="Fascinating data",xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
abline(model, col="red") # plot the mean

# calculate residuals and predicted values
res = signif(residuals(model), 5)
pre = predict(model) # plot distances between points and the regression line
segments(wt, mpg, wt, pre, col="red")

```




